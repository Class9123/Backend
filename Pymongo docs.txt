PyMongo is a Python library used to interact with MongoDB, a NoSQL database. Below is a comprehensive list of commonly used functions and syntaxes in PyMongo along with a brief description of each.


---

1. Connection and Initialization

MongoClient()

Syntax: client = MongoClient("mongodb://localhost:27017/")

Description: Connects to the MongoDB server. You can specify the server URI, port, and other options.




---

2. Accessing Databases

Access Database

Syntax: db = client['database_name'] or db = client.database_name

Description: Accesses a specific database from the client.


List Databases

Syntax: client.list_database_names()

Description: Returns a list of database names.


Check Database Existence

Syntax: 'database_name' in client.list_database_names()

Description: Checks if a database exists.




---

3. Accessing Collections

Access Collection

Syntax: collection = db['collection_name'] or collection = db.collection_name

Description: Accesses a specific collection within a database.


List Collections

Syntax: db.list_collection_names()

Description: Returns a list of collection names in the database.




---

4. CRUD Operations

Create

Insert a Single Document

Syntax: collection.insert_one(document)

Description: Inserts a single document into the collection.


Insert Multiple Documents

Syntax: collection.insert_many([document1, document2, ...])

Description: Inserts multiple documents into the collection.



Read

Find All Documents

Syntax: collection.find()

Description: Returns a cursor to iterate over all documents.


Find Specific Documents

Syntax: collection.find(query)

Description: Returns documents matching the query.


Find One Document

Syntax: collection.find_one(query)

Description: Returns the first document that matches the query.



Update

Update a Single Document

Syntax: collection.update_one(filter, update)

Description: Updates the first document that matches the filter.


Update Multiple Documents

Syntax: collection.update_many(filter, update)

Description: Updates all documents that match the filter.



Delete

Delete a Single Document

Syntax: collection.delete_one(filter)

Description: Deletes the first document that matches the filter.


Delete Multiple Documents

Syntax: collection.delete_many(filter)

Description: Deletes all documents that match the filter.




---

5. Query Operators

Comparison Operators: $eq, $ne, $gt, $gte, $lt, $lte

Example: collection.find({"age": {"$gt": 25}})


Logical Operators: $and, $or, $not, $nor

Example: collection.find({"$or": [{"age": {"$lt": 30}}, {"city": "New York"}]})


Existence Operators: $exists

Example: collection.find({"phone": {"$exists": True}})


Array Operators: $all, $size, $elemMatch

Example: collection.find({"tags": {"$all": ["python", "mongodb"]}})




---

6. Aggregation

Aggregate Pipeline

Syntax: collection.aggregate(pipeline)

Description: Performs advanced data processing using stages like $match, $group, $sort, $project.




---

7. Indexing

Create Index

Syntax: collection.create_index([("field", direction)])

Description: Creates an index on a specified field.


List Indexes

Syntax: collection.list_indexes()

Description: Lists all indexes on a collection.




---

8. Administrative Commands

Drop Collection

Syntax: collection.drop()

Description: Deletes a collection from the database.


Drop Database

Syntax: client.drop_database('database_name')

Description: Deletes a database.


Count Documents

Syntax: collection.count_documents(filter)

Description: Counts the number of documents that match the filter.




---

9. Transactions

Start a Session

Syntax: session = client.start_session()

Description: Starts a session for transactions.


Transaction Example

with client.start_session() as session:
    with session.start_transaction():
        collection1.insert_one(document, session=session)
        collection2.insert_one(document, session=session)



---

10. Miscellaneous

Rename Collection

Syntax: collection.rename('new_name')

Description: Renames the collection.


Estimated Document Count

Syntax: collection.estimated_document_count()

Description: Estimates the number of documents in the collection.


Bulk Operations

Syntax: collection.bulk_write(operations)

Description: Performs multiple write operations efficiently.




---

This overview provides the most commonly used functions and syntaxes in PyMongo. Let me know if you need deeper details or examples on specific topics!

